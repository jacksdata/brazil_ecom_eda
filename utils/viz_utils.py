{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n\"\"\"\n    Script criado para consolidar funções úteis utilizadas na plotagem e personalização de gráficos\n\"\"\"\n\n\"\"\"\n--------------------------------------------\n---------- IMPORTANDO BIBLIOTECAS ----------\n--------------------------------------------\n\"\"\"\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom typing import *\nfrom dataclasses import dataclass\nfrom math import ceil\n\n\"\"\"\n--------------------------------------------\n---------- 1. FORMATAÇÃO DE EIXOS ----------\n--------------------------------------------\n\"\"\"\n\n\n# Formatando eixos do matplotlib\ndef format_spines(ax, right_border=True):\n    \"\"\"\n    This function sets up borders from an axis and personalize colors\n\n    Input:\n        Axis and a flag for deciding or not to plot the right border\n    Returns:\n        Plot configuration\n    \"\"\"\n    # Setting up colors\n    ax.spines['bottom'].set_color('#CCCCCC')\n    ax.spines['left'].set_color('#CCCCCC')\n    ax.spines['top'].set_visible(False)\n    if right_border:\n        ax.spines['right'].set_color('#CCCCCC')\n    else:\n        ax.spines['right'].set_color('#FFFFFF')\n    ax.patch.set_facecolor('#FFFFFF')\n\n# Classe para plotagem dos rótulos dos dados em gráficos de barras\n# Referência: https://towardsdatascience.com/annotating-bar-charts-and-other-matplolib-techniques-cecb54315015\n#Alias types to reduce typing, no pun intended\nPatch = matplotlib.patches.Patch\nPosVal = Tuple[float, Tuple[float, float]]\nAxis = matplotlib.axes.Axes\nPosValFunc = Callable[[Patch], PosVal]\n\n@dataclass\nclass AnnotateBars:\n    font_size: int = 10\n    color: str = \"black\"\n    n_dec: int = 2\n    def horizontal(self, ax: Axis, centered=False):\n        def get_vals(p: Patch) -> PosVal:\n            value = p.get_width()\n            div = 2 if centered else 1\n            pos = (\n                p.get_x() + p.get_width() / div,\n                p.get_y() + p.get_height() / 2,\n            )\n            return value, pos\n        ha = \"center\" if centered else  \"left\"\n        self._annotate(ax, get_vals, ha=ha, va=\"center\")\n    def vertical(self, ax: Axis, centered:bool=False):\n        def get_vals(p: Patch) -> PosVal:\n            value = p.get_height()\n            div = 2 if centered else 1\n            pos = (p.get_x() + p.get_width() / 2,\n                   p.get_y() + p.get_height() / div\n            )\n            return value, pos\n        va = \"center\" if centered else \"bottom\"\n        self._annotate(ax, get_vals, ha=\"center\", va=va)\n    def _annotate(self, ax, func: PosValFunc, **kwargs):\n        cfg = {\"color\": self.color,\n               \"fontsize\": self.font_size, **kwargs}\n        for p in ax.patches:\n            value, pos = func(p)\n            ax.annotate(f\"{value:.{self.n_dec}f}\", pos, **cfg)\n\n# Definindo funções úteis para plotagem dos rótulos no gráfico\ndef make_autopct(values):\n    \"\"\"\n    Etapas:\n        1. definição de função para formatação dos rótulos\n\n    Argumentos:\n        values -- valores extraídos da função value_counts() da coluna de análise [list]\n\n    Retorno:\n        my_autopct -- string formatada para plotagem dos rótulos\n    \"\"\"\n\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct * total / 100.0))\n\n        return '{p:.1f}%\\n({v:d})'.format(p=pct, v=val)\n\n    return my_autopct\n\n\"\"\"\n--------------------------------------------\n---------- 2. PLOTAGENS GRÁFICAS -----------\n--------------------------------------------\n\"\"\"\n\n\n# Função para plotagem de gráfico de rosca em relação a uma variávei específica do dataset\ndef donut_plot(df, col, ax, label_names=None, text='', colors=['crimson', 'navy'], circle_radius=0.8,\n            title=f'Gráfico de Rosca', flag_ruido=0):\n    \"\"\"\n    Etapas:\n        1. definição de funções úteis para mostrar rótulos em valor absoluto e porcentagem\n        2. criação de figura e círculo central de raio pré-definido\n        3. plotagem do gráfico de pizza e adição do círculo central\n        4. configuração final da plotagem\n\n    Argumentos:\n        df -- DataFrame alvo da análise [pandas.DataFrame]\n        col -- coluna do DataFrame a ser analisada [string]\n        label_names -- nomes customizados a serem plotados como labels [list]\n        text -- texto central a ser posicionado [string / default: '']\n        colors -- cores das entradas [list / default: ['crimson', 'navy']]\n        figsize -- dimensões da plotagem [tupla / default: (8, 8)]\n        circle_radius -- raio do círculo central [float / default: 0.8]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Retorno dos valores e definição da figura\n    values = df[col].value_counts().values\n    if label_names is None:\n        label_names = df[col].value_counts().index\n\n    # Verificando parâmetro de supressão de alguma categoria da análise\n    if flag_ruido > 0:\n        values = values[:-flag_ruido]\n        label_names = label_names[:-flag_ruido]\n\n    # Plotando gráfico de rosca\n    center_circle = plt.Circle((0, 0), circle_radius, color='white')\n    ax.pie(values, labels=label_names, colors=colors, autopct=make_autopct(values))\n    ax.add_artist(center_circle)\n\n    # Configurando argumentos do texto central\n    kwargs = dict(size=20, fontweight='bold', va='center')\n    ax.text(0, 0, text, ha='center', **kwargs)\n    ax.set_title(title, size=14, color='dimgrey')\n\n\n# Função para análise da matriz de correlação\ndef target_correlation_matrix(data, label_name, ax, n_vars=10, corr='positive', fmt='.2f', cmap='YlGnBu',\n                              cbar=True, annot=True, square=True):\n    \"\"\"\n    Etapas:\n        1. construção de correlação entre as variáveis\n        2. filtragem das top k variáveis com maior correlação\n        3. plotagem e configuração da matriz de correlação\n\n    Argumentos:\n        data -- DataFrame a ser analisado [pandas.DataFrame]\n        label_name -- nome da coluna contendo a variável resposta [string]\n        n_vars -- indicador das top k variáveis a serem analisadas [int]\n        corr -- indicador booleano para plotagem de correlações ('positive', 'negative') [string]\n        fmt -- formato dos números de correlação na plotagem [string]\n        cmap -- color mapping [string]\n        figsize -- dimensões da plotagem gráfica [tupla]\n        cbar -- indicador de plotagem da barra indicadora lateral [bool]\n        annot -- indicador de anotação dos números de correlação na matriz [bool]\n        square -- indicador para redimensionamento quadrático da matriz [bool]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Criando matriz de correlação para a base de dados\n    corr_mx = data.corr()\n\n    # Retornando apenas as top k variáveis com maior correlação frente a variável resposta\n    if corr == 'positive':\n        corr_cols = list(corr_mx.nlargest(n_vars+1, label_name)[label_name].index)\n        title = f'Top {n_vars} Features - Correlação Positiva com o Target'\n    elif corr == 'negative':\n        corr_cols = list(corr_mx.nsmallest(n_vars+1, label_name)[label_name].index)\n        corr_cols = [label_name] + corr_cols[:-1]\n        title = f'Top {n_vars} Features - Correlação Negativa com o Target'\n        cmap = 'magma'\n\n    corr_data = np.corrcoef(data[corr_cols].values.T)\n\n    # Construindo plotagem da matriz\n    sns.heatmap(corr_data, ax=ax, cbar=cbar, annot=annot, square=square, fmt=fmt, cmap=cmap,\n                yticklabels=corr_cols, xticklabels=corr_cols)\n    ax.set_title(title, size=14, color='dimgrey', pad=20)\n\n    return\n\n\n# Distplot para comparação de densidade das features baseadas na variável target\ndef distplot(df, features, fig_cols, hue=False, color=['crimson', 'darkslateblue'], hist=False, figsize=(16, 12)):\n    \"\"\"\n    Etapas:\n        1. criação de figura de acordo com as especificações dos argumentos\n        2. laço para plotagem de boxplot por eixo\n        3. formatação gráfica\n        4. validação de eixos excedentes\n\n    Argumentos:\n        df -- base de dados para plotagem [pandas.DataFrame]\n        features -- conjunto de colunas a serem avaliadas [list]\n        fig_cols -- especificações da figura do matplotlib [int]\n        hue -- variável resposta contida na base [string -- default: False]\n        color_list -- cores para cada classe nos gráficos [list - default: ['crimson', 'darkslateblue']]\n        hist -- indicador de plotagem das faixas do histograma [bool - default: False]\n        figsize -- dimensões da plotagem [tupla - default: (16, 12)]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Definindo variáveis de controle\n    n_features = len(features)\n    fig_cols = fig_cols\n    fig_rows = ceil(n_features / fig_cols)\n    i, j, color_idx = (0, 0, 0)\n\n    # Plotando gráficos\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=figsize)\n\n    # Percorrendo por cada uma das features\n    for col in features:\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n        target_idx = 0\n\n        # Plotando, para cada eixo, um gráfico por classe target\n        if hue != False:\n            for classe in df[hue].value_counts().index:\n                df_hue = df[df[hue] == classe]\n                sns.distplot(df_hue[col], color=color[target_idx], hist=hist, ax=ax, label=classe)\n                target_idx += 1\n        else:\n            sns.distplot(df[col], color=color, hist=hist, ax=ax)\n\n        # Incrementando índices\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n        # Customizando plotagem\n        ax.set_title(f'Feature: {col}', color='dimgrey', size=14)\n        plt.setp(ax, yticks=[])\n        sns.set(style='white')\n        sns.despine(left=True)\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= n_features:\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    # Finalizando customização\n    plt.tight_layout()\n    plt.show()\n\n\n# Função para plotagem de stripplot\ndef stripplot(df, features, fig_cols, hue=False, palette='viridis', figsize=(16, 12)):\n    \"\"\"\n    Etapas:\n        1. criação de figura de acordo com as especificações dos argumentos\n        2. laço para plotagem de stripplot por eixo\n        3. formatação gráfica\n        4. validação de eixos excedentes\n\n    Argumentos:\n        df -- base de dados para plotagem [pandas.DataFrame]\n        features -- conjunto de colunas a serem avaliadas [list]\n        fig_cols -- especificações da figura do matplotlib [int]\n        hue -- variável resposta contida na base [string - default: False]\n        palette -- paleta de cores [string / lista - default: 'viridis']\n        figsize -- dimensões da figura de plotagem [tupla - default: (16, 12)]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Definindo variáveis de controle\n    n_features = len(features)\n    fig_cols = fig_cols\n    fig_rows = ceil(n_features / fig_cols)\n    i, j, color_idx = (0, 0, 0)\n\n    # Plotando gráficos\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=figsize)\n\n    # Plotando gráfico\n    for col in features:\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n\n        # Plotando gráfico atribuindo a variável target como hue\n        if hue != False:\n            sns.stripplot(x=df[hue], y=df[col], ax=ax, palette=palette)\n        else:\n            sns.stripplot(y=df[col], ax=ax, palette=palette)\n\n        # Formatando gráfico\n        format_spines(ax, right_border=False)\n        ax.set_title(f'Feature: {col.upper()}', size=14, color='dimgrey')\n        plt.tight_layout()\n\n        # Incrementando índices\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= n_features:\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n\ndef boxenplot(df, features, fig_cols, hue=False, palette='viridis', figsize=(16, 12)):\n    \"\"\"\n    Etapas:\n        1. criação de figura de acordo com as especificações dos argumentos\n        2. laço para plotagem de boxplot por eixo\n        3. formatação gráfica\n        4. validação de eixos excedentes\n\n    Argumentos:\n        df -- base de dados para plotagem [pandas.DataFrame]\n        features -- conjunto de colunas a serem avaliadas [list]\n        fig_cols -- especificações da figura do matplotlib [int]\n        hue -- variável resposta contida na base [string - default: False]\n        palette -- paleta de cores [string / lista - default: 'viridis']\n        figsize -- dimensões da figura de plotagem [tupla - default: (16, 12)]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Definindo variáveis de controle\n    n_features = len(features)\n    fig_rows = ceil(n_features / fig_cols)\n    i, j, color_idx = (0, 0, 0)\n\n    # Plotando gráficos\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=figsize)\n\n    # Plotando gráfico\n    for col in features:\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n\n        # Plotando gráfico atribuindo a variável target como hue\n        if hue != False:\n            sns.boxenplot(x=df[hue], y=df[col], ax=ax, palette=palette)\n        else:\n            sns.boxenplot(y=df[col], ax=ax, palette=palette)\n\n        # Formatando gráfico\n        format_spines(ax, right_border=False)\n        ax.set_title(f'Feature: {col.upper()}', size=14, color='dimgrey')\n        plt.tight_layout()\n\n        # Incrementando índices\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= n_features:\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n\n# Função responsável por plotar volumetria de uma variável categórica (quebra por hue é opcional)\ndef countplot(df, feature, order=True, hue=False, label_names=None, palette='plasma', colors=['darkgray', 'navy'],\n              figsize=(12, 5), loc_legend='lower left', width=0.75, sub_width=0.3, sub_size=12):\n    \"\"\"\n    Etapas:\n        1. customização da plotagem de acordo com a presença (ou não) do parâmetro hue\n        2. definição das figuras e plotagem dos gráficos adequados\n        3. customização da plotagem\n\n    Argumentos:\n        df -- DataFrame alvo da análise [pandas.DataFrame]\n        feature -- coluna a ser analisada [string]\n        order -- flag booleano pra indicar a ordenação da plotagem [bool - default: True]\n        hue -- parâmetro de quebra de análise [string - default: False]\n        label_names -- descrição dos labels a serem colocados na legenda [list - default: None]\n        palette -- paleta de cores a ser utilizada no plot singular da variável [string - default: 'viridis']\n        colors -- cores a serem utilizadas no plot quebrado por hue [list - default: ['darkgray', 'navy']]\n        figsize -- dimensões da plotagem [tupla - default: (15, 5)]\n        loc_legend -- posição da legenda em caso de plotagem por hue [string - default: 'best']\n        width -- largura das barras em caso de plotagem por hue [float - default: 0.5]\n        sub_width -- parâmetro de alinhamento dos rótulos em caso de plotagem por hue [float - default: 0.3]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Verificando plotagem por quebra de alguma variável categórica\n    ncount = len(df)\n    if hue != False:\n        # Redifinindo dimensões e plotando gráfico solo + versus variável categórica\n        figsize = (figsize[0], figsize[1] * 2)\n        fig, axs = plt.subplots(nrows=2, ncols=1, figsize=figsize)\n        if order:\n            sns.countplot(x=feature, data=df, palette=palette, ax=axs[0], order=df[feature].value_counts().index)\n        else:\n            sns.countplot(x=feature, data=df, palette=palette, ax=axs[0])\n\n        # Plotando gráfico de análise por hue (stacked bar chart)\n        feature_rate = pd.crosstab(df[feature], df[hue])\n        percent_df = feature_rate.div(feature_rate.sum(1).astype(float), axis=0)\n        if order:\n            sort_cols = list(df[feature].value_counts().index)\n            sorter_index = dict(zip(sort_cols, range(len(sort_cols))))\n            percent_df['rank'] = percent_df.index.map(sorter_index)\n            percent_df = percent_df.sort_values(by='rank')\n            percent_df = percent_df.drop('rank', axis=1)\n            percent_df.plot(kind='bar', stacked=True, ax=axs[1], color=colors, width=width)\n        else:\n            percent_df.plot(kind='bar', stacked=True, ax=axs[1], color=colors, width=width)\n        # sns.countplot(x=feature, data=df, palette=colors, hue=hue, ax=axs[1], order=df[feature].value_counts().index)\n\n        # Inserindo rótulo de percentual para gráfico singular\n        for p in axs[0].patches:\n            # Coletando parâmetros e inserindo no gráfico\n            x = p.get_bbox().get_points()[:, 0]\n            y = p.get_bbox().get_points()[1, 1]\n            axs[0].annotate('{:.1f}%'.format(100. * y / ncount), (x.mean(), y), ha='center', va='bottom',\n                            size=sub_size)\n\n        # Inserindo rótulo de percentual para gráfico hue\n        for p in axs[1].patches:\n            # Coletando parâmetros\n            height = p.get_height()\n            width = p.get_width()\n            x = p.get_x()\n            y = p.get_y()\n\n            # Formatando parâmetros coletados e inserindo no gráfico\n            label_text = f'{round(100 * height, 1)}%'\n            label_x = x + width - sub_width\n            label_y = y + height / 2\n            axs[1].text(label_x, label_y, label_text, ha='center', va='center', color='white', fontweight='bold',\n                        size=sub_size)\n\n        # Definindo títulos\n        axs[0].set_title(f'Análise de Volumetria da Variável {feature}', size=14, color='dimgrey', pad=20)\n        axs[0].set_ylabel('Volumetria')\n        axs[1].set_title(f'Análise de Volumetria da Variável {feature} por {hue}', size=14, color='dimgrey', pad=20)\n        axs[1].set_ylabel('Percentual')\n\n        # Formatando eixo de cada uma das plotagens\n        for ax in axs:\n            format_spines(ax, right_border=False)\n\n        # Definindo legenda para hue\n        plt.legend(loc=loc_legend, title=f'{hue}', labels=label_names)\n\n    else:\n        # Plotagem única: sem quebra por variável hue\n        fig, ax = plt.subplots(figsize=figsize)\n        if order:\n            sns.countplot(x=feature, data=df, palette=palette, ax=ax, order=df[feature].value_counts().index)\n        else:\n            sns.countplot(x=feature, data=df, palette=palette, ax=ax)\n\n            # Formatando eixos\n        ax.set_ylabel('Volumetria')\n        format_spines(ax, right_border=False)\n\n        # Inserindo rótulo de percentual\n        for p in ax.patches:\n            x = p.get_bbox().get_points()[:, 0]\n            y = p.get_bbox().get_points()[1, 1]\n            ax.annotate('{:.1f}%'.format(100. * y / ncount), (x.mean(), y), ha='center', va='bottom')\n\n        # Definindo título\n        ax.set_title(f'Análise de Volumetria da Variável {feature}', size=14, color='dimgrey')\n\n    # Configurações finais\n    plt.tight_layout()\n    plt.show()\n\n# Função responsável por plotar volumetria de uma única variável categórica em formato atualizado\ndef single_countplot(df, ax, x=None, y=None, top=None, order=True, hue=False, palette='plasma',\n                     width=0.75, sub_width=0.3, sub_size=12):\n    \"\"\"\n    Parâmetros\n    ----------\n    classifiers: conjunto de classificadores em forma de dicionário [dict]\n    X: array com os dados a serem utilizados no treinamento [np.array]\n    y: array com o vetor target do modelo [np.array]\n\n    Retorno\n    -------\n    None\n    \"\"\"\n\n    # Verificando plotagem por quebra de alguma variável categórica\n    ncount = len(df)\n    if x:\n        col = x\n    else:\n        col = y\n\n    # Verificando a plotagem de top categorias\n    if top is not None:\n        cat_count = df[col].value_counts()\n        top_categories = cat_count[:top].index\n        df = df[df[col].isin(top_categories)]\n\n    # Validando demais argumentos e plotando gráfico\n    if hue != False:\n        if order:\n            sns.countplot(x=x, y=y, data=df, palette=palette, ax=ax, order=df[col].value_counts().index, hue=hue)\n        else:\n            sns.countplot(x=x, y=y, data=df, palette=palette, ax=ax, hue=hue)\n    else:\n        if order:\n            sns.countplot(x=x, y=y, data=df, palette=palette, ax=ax, order=df[col].value_counts().index)\n        else:\n            sns.countplot(x=x, y=y, data=df, palette=palette, ax=ax)\n\n    # Formatando eixos\n    format_spines(ax, right_border=False)\n\n    # Inserindo rótulo de percentual\n    if x:\n        for p in ax.patches:\n            x = p.get_bbox().get_points()[:, 0]\n            y = p.get_bbox().get_points()[1, 1]\n            ax.annotate('{}\\n{:.1f}%'.format(int(y), 100. * y / ncount), (x.mean(), y), ha='center', va='bottom')\n    else:\n        for p in ax.patches:\n            x = p.get_bbox().get_points()[1, 0]\n            y = p.get_bbox().get_points()[:, 1]\n            ax.annotate('{} ({:.1f}%)'.format(int(x), 100. * x / ncount), (x, y.mean()), va='center')\n\n\n# Função para plotagem de volumetria das variáveis categóricas do conjunto de dados\ndef catplot_analysis(df_categorical, fig_cols=3, hue=False, palette='viridis', figsize=(16, 10)):\n    \"\"\"\n    Etapas:\n        1. retorno das variáveis categóricas do conjunto de dados\n        2. parametrização de variáveis de plotagem\n        3. aplicação de laços de repetição para plotagens / formatação\n\n    Argumentos:\n        df -- conjunto de dados a ser analisado [pandas.DataFrame]\n        fig_cols -- quantidade de colunas da figura matplotlib [int]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Retornando parâmetros para organização da figura\n    if hue != False:\n        cat_features = list(df_categorical.drop(hue, axis=1).columns)\n    else:\n        cat_features = list(df_categorical.columns)\n\n    total_cols = len(cat_features)\n    fig_cols = fig_cols\n    fig_rows = ceil(total_cols / fig_cols)\n    ncount = len(cat_features)\n\n    # Retornando parâmetros para organização da figura\n    sns.set(style='white', palette='muted', color_codes=True)\n    total_cols = len(cat_features)\n    fig_rows = ceil(total_cols / fig_cols)\n\n    # Criando figura de plotagem\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=(figsize))\n    i, j = 0, 0\n\n    # Laço de repetição para plotagem categórica\n    for col in cat_features:\n        # Indexando variáveis e plotando gráfico\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n        if hue != False:\n            sns.countplot(y=col, data=df_categorical, palette=palette, ax=ax, hue=hue,\n                          order=df_categorical[col].value_counts().index)\n        else:\n            sns.countplot(y=col, data=df_categorical, palette=palette, ax=ax,\n                          order=df_categorical[col].value_counts().index)\n\n        # Customizando gráfico\n        format_spines(ax, right_border=False)\n        AnnotateBars(n_dec=0, color='dimgrey').horizontal(ax)\n        ax.set_title(col)\n\n        # Incrementando índices de eixo\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= len(cat_features):\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    plt.tight_layout()\n    plt.show()\n\n\n# Função para plotagem de volumetria das variáveis categóricas do conjunto de dados\ndef numplot_analysis(df_numerical, fig_cols=3, color_sequence=['darkslateblue', 'mediumseagreen', 'darkslateblue'],\n                     hue=False, color_hue=['darkslateblue', 'crimson'], hist=False):\n    \"\"\"\n    Etapas:\n        1. retorno das variáveis categóricas do conjunto de dados\n        2. parametrização de variáveis de plotagem\n        3. aplicação de laços de repetição para plotagens / formatação\n\n    Argumentos:\n        df -- conjunto de dados a ser analisado [pandas.DataFrame]\n        fig_cols -- quantidade de colunas da figura matplotlib [int]\n\n    Retorno:\n        None\n    \"\"\"\n\n    # Configurando sets do seaborn\n    sns.set(style='white', palette='muted', color_codes=True)\n\n    # Criando um DataFrame de variáveis categóricas\n    #num_features = [col for col, dtype in df.dtypes.items() if dtype != 'object']\n    #df_numerical = df.loc[:, num_features]\n\n    # Retornando parâmetros para organização da figura\n    if hue != False:\n        num_features = list(df_numerical.drop(hue, axis=1).columns)\n    else:\n        num_features = list(df_numerical.columns)\n\n    total_cols = len(num_features)\n    fig_cols = fig_cols\n    fig_rows = ceil(total_cols / fig_cols)\n\n    # Criando figura de plotagem\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=(fig_cols * 5, fig_rows * 4.5))\n    sns.despine(left=True)\n    i, j = 0, 0\n\n    # Laço de repetição para plotagem categórica\n    color_idx = 0\n    for col in num_features:\n        # Indexando variáveis e plotando gráfico\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n        target_idx = 0\n\n        if hue != False:\n            for classe in df_numerical[hue].value_counts().index:\n                df_hue = df_numerical[df_numerical[hue] == classe]\n                sns.distplot(df_hue[col], color=color_hue[target_idx], hist=hist, ax=ax, label=classe)\n                target_idx += 1\n                ax.set_title(col)\n        else:\n            sns.distplot(df_numerical[col], color=color_sequence[color_idx], hist=hist, ax=ax)\n            ax.set_title(col, color=color_sequence[color_idx])\n\n        # Customizando gráfico\n        format_spines(ax, right_border=False)\n\n        # Incrementando índices de eixo\n        color_idx += 1\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n            color_idx = 0\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= len(num_features):\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    plt.setp(axs, yticks=[])\n    plt.tight_layout()\n    plt.show()\n\n\n# Função para plotagem de representatividade de cada categoria quanto a um hue específico\ndef catplot_percentage_analysis(df_categorical, hue, fig_cols=2, palette='viridis', figsize=(16, 10)):\n    \"\"\"\n    Etapas:\n        1. retorno das variáveis categóricas do conjunto de dados\n        2. parametrização de variáveis de plotagem\n        3. aplicação de laços de repetição para plotagens / formatação\n\n    Argumentos:\n        df -- conjunto de dados a ser analisado [pandas.DataFrame]\n        fig_cols -- quantidade de colunas da figura matplotlib [int]\n\n    Retorno:\n        None\n    \"\"\"\n \n    # Retornando parâmetros para organização da figura\n    sns.set(style='white', palette='muted', color_codes=True)\n    cat_features = list(df_categorical.drop(hue, axis=1).columns)\n    total_cols = len(cat_features)\n    fig_rows = ceil(total_cols / fig_cols)\n\n    # Criando figura de plotagem\n    fig, axs = plt.subplots(nrows=fig_rows, ncols=fig_cols, figsize=(figsize))\n    i, j = 0, 0\n\n    # Laço de repetição para plotagem categórica\n    for col in cat_features:\n        # Indexando variáveis e plotando gráfico\n        try:\n            ax = axs[i, j]\n        except:\n            ax = axs[j]\n\n        # Aplicando crosstab para análise de representatividade da categoria\n        col_to_hue = pd.crosstab(df_categorical[col], df_categorical[hue])\n        col_to_hue.div(col_to_hue.sum(1).astype(float), axis=0).plot(kind='barh', stacked=True, ax=ax,\n                                                                     colors=palette)\n\n        # Customizando gráfico\n        format_spines(ax, right_border=False)\n        ax.set_title(col)\n        ax.set_ylabel('')\n\n        # Incrementando índices de eixo\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    # Tratando caso apartado: figura(s) vazia(s)\n    i, j = (0, 0)\n    for n_plots in range(fig_rows * fig_cols):\n\n        # Se o índice do eixo for maior que a quantidade de features, elimina as bordas\n        if n_plots >= len(cat_features):\n            try:\n                axs[i][j].axis('off')\n            except TypeError as e:\n                axs[j].axis('off')\n\n        # Incrementando\n        j += 1\n        if j == fig_cols:\n            j = 0\n            i += 1\n\n    plt.tight_layout()\n    plt.show()\n\n\ndef mean_sum_analysis(df, group_col, value_col, orient='vertical', palette='plasma', figsize=(15, 6)):\n    \"\"\"\n    Parâmetros\n    ----------\n    classifiers: conjunto de classificadores em forma de dicionário [dict]\n    X: array com os dados a serem utilizados no treinamento [np.array]\n    y: array com o vetor target do modelo [np.array]\n\n    Retorno\n    -------\n    None\n    \"\"\"\n\n    # Grouping data\n    df_mean = df.groupby(group_col, as_index=False).mean()\n    df_sum = df.groupby(group_col, as_index=False).sum()\n\n    # Sorting grouped dataframes\n    df_mean.sort_values(by=value_col, ascending=False, inplace=True)\n    sorter = list(df_mean[group_col].values)\n    sorter_idx = dict(zip(sorter, range(len(sorter))))\n    df_sum['mean_rank'] = df_mean[group_col].map(sorter_idx)\n    df_sum.sort_values(by='mean_rank', inplace=True)\n    df_sum.drop('mean_rank', axis=1, inplace=True)\n\n    # Plotting data\n    fig, axs = plt.subplots(ncols=2, figsize=figsize)\n    if orient == 'vertical':\n        sns.barplot(x=value_col, y=group_col, data=df_mean, ax=axs[0], palette=palette)\n        sns.barplot(x=value_col, y=group_col, data=df_sum, ax=axs[1], palette=palette)\n        AnnotateBars(n_dec=0, font_size=12, color='black').horizontal(axs[0])\n        AnnotateBars(n_dec=0, font_size=12, color='black').horizontal(axs[1])\n    elif orient == 'horizontal':\n        sns.barplot(x=group_col, y=value_col, data=df_mean, ax=axs[0], palette=palette)\n        sns.barplot(x=group_col, y=value_col, data=df_sum, ax=axs[1], palette=palette)\n        AnnotateBars(n_dec=0, font_size=12, color='black').vertical(axs[0])\n        AnnotateBars(n_dec=0, font_size=12, color='black').vertical(axs[1])\n\n    # Customizing plot\n    for ax in axs:\n        format_spines(ax, right_border=False)\n        ax.set_ylabel('')\n    axs[0].set_title(f'Mean of {value_col} by {group_col}', size=14, color='dimgrey')\n    axs[1].set_title(f'Sum of {value_col} by {group_col}', size=14, color='dimgrey')\n\n    plt.tight_layout()\n    plt.show()\n\n\ndef answear_plot(grouped_data, grouped_col, list_cols, axs, top=5, bottom_filter=True, palette='plasma'):\n    \"\"\"\n    Parâmetros\n    ----------\n    grouped_data: pandas DataFrame com os dados já agrupados para análise [pd.DataFrame]\n    grouped_col: referência da coluna pivot utilizada no agrupamento [string]\n    list_cols: lista de colunas a serem utilizadas na análise [list]\n    axs: eixos a serem utilizados na plotagem [matplotlib.axis]\n    top: quantidade de entradas nas análises head and tail [int, default: 5]\n    bottom_filter: flag para filtragem de elementos com pelo menos 1 ocorrência no bot [bool, default: True]\n    palette: paleta de cores utilizada na plotagem [string, default: 'plasma']\n\n    Retorno\n    -------\n    None\n    \"\"\"\n\n    # Extracting plot dims and looking at number of cols\n    nrows = axs.shape[0]\n    ncols = axs.shape[1]\n    if len(list_cols) != ncols:\n        print(f'Number of cols passed in list_cols arg is different for figure cols axis. Please check it.')\n        return None\n\n    # Iterating over columns in the list and creating charts\n    i, j = 0, 0\n    for col in list_cols:\n        ax0 = axs[-3, j]\n        ax1 = axs[-2, j]\n        ax2 = axs[-1, j]\n        sorted_data = grouped_data.sort_values(by=col, ascending=False)\n\n        # First Line: Top entries\n        sns.barplot(x=col, y=grouped_col, data=sorted_data.head(top), ax=ax1, palette=palette)\n        ax1.set_title(f'Top {top} {grouped_col.capitalize()} with Highest \\n{col.capitalize()}')\n\n        # Second Line: Bottom entries\n        if bottom_filter:\n            sns.barplot(x=col, y=grouped_col, data=sorted_data[sorted_data[col] > 0].tail(top), ax=ax2,\n                        palette=palette+'_r')\n        else:\n            sns.barplot(x=col, y=grouped_col, data=sorted_data.tail(top), ax=ax2, palette=palette+'_r')\n        ax2.set_title(f'Top {top} {grouped_col.capitalize()} with Lowest \\n{col.capitalize()}')\n\n        # Customizing charts\n        for ax in ax1, ax2:\n            ax.set_xlim(0, grouped_data[col].max())\n            ax.set_ylabel('')\n            format_spines(ax, right_border=False)\n\n        # Annotations\n        mean_ind = grouped_data[col].mean()\n        ax0.text(0.50, 0.30, round(mean_ind, 2), fontsize=45, ha='center')\n        ax0.text(0.50, 0.12, f'is the average of {col}', fontsize=12, ha='center')\n        ax0.text(0.50, 0.00, f'by {grouped_col}', fontsize=12, ha='center')\n        ax0.axis('off')\n\n        j += 1\n\n\"\"\"\n--------------------------------------------\n-------- 3. ANÁLISES EM DATAFRAMES ---------\n--------------------------------------------\n\"\"\"\n\n\ndef data_overview(df, corr=False, label_name=None, sort_by='qtd_null', thresh_percent_null=0, thresh_corr_label=0):\n    \"\"\"\n    Etapas:\n        1. levantamento de atributos com dados nulos no conjunto\n        2. análise do tipo primitivo de cada atributo\n        3. análise da quantidade de entradas em caso de atributos categóricos\n        4. extração da correlação pearson com o target para cada atributo\n        5. aplicação de regras definidas nos argumentos\n        6. retorno do dataset de overview criado\n\n    Argumentos:\n        df -- DataFrame a ser analisado [pandas.DataFrame]\n        label_name -- nome da variável target [string]\n        sort_by -- coluna de ordenação do dataset de overview [string - default: 'qtd_null']\n        thresh_percent_null -- filtro de dados nulos [int - default: 0]\n        threh_corr_label -- filtro de correlação com o target [int - default: 0]\n\n    Retorno\n        df_overview -- dataet consolidado contendo análise das colunas [pandas.DataFrame]\n    \"\"\"\n\n    # Criando DataFrame com informações de dados nulos\n    df_null = pd.DataFrame(df.isnull().sum()).reset_index()\n    df_null.columns = ['feature', 'qtd_null']\n    df_null['percent_null'] = df_null['qtd_null'] / len(df)\n\n    # Retornando tipo primitivo e qtd de entradas para os categóricos\n    df_null['dtype'] = df_null['feature'].apply(lambda x: df[x].dtype)\n    df_null['qtd_cat'] = [len(df[col].value_counts()) if df[col].dtype == 'object' else 0 for col in\n                          df_null['feature'].values]\n\n    if corr:\n        # Extraindo informação de correlação com o target\n        label_corr = pd.DataFrame(df.corr()[label_name])\n        label_corr = label_corr.reset_index()\n        label_corr.columns = ['feature', 'target_pearson_corr']\n\n        # Unindo informações\n        df_null_overview = df_null.merge(label_corr, how='left', on='feature')\n        df_null_overview.query('target_pearson_corr > @thresh_corr_label')\n    else:\n        df_null_overview = df_null\n\n    # Filtrando dados nulos de acordo com limiares\n    df_null_overview.query('percent_null > @thresh_percent_null')\n\n    # Ordenando DataFrame\n    df_null_overview = df_null_overview.sort_values(by=sort_by, ascending=False)\n    df_null_overview = df_null_overview.reset_index(drop=True)\n\n    return df_null_overview","metadata":{"_uuid":"32af563d-9825-4d1b-a449-58cbf48a99a6","_cell_guid":"026ddc73-efd1-4901-9211-4d85d85e7bc0","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}